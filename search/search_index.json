{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"1.%20Getting%20Started/","text":"Getting Started in Toolkit. General Information Welcome to the SinfonIA Toolkit documentation page. This project is a low-level ROS library Developed and mantained by the SinfonIA Uniandes team. Its main purpouse is the connection and management for the code of the different subsystems that compone this project (For example, Vision or Motion Control, this same webpage includes an extensive list of the tools involved in this project, please refer to the index for an extensive list on the matter.). This guide will cover the technical, structural, and algorithmic nuances of this project, however, some prior knowledge on the structures are reccomended (please refer to 'External Sources' for further information and documentation on such). Project Prerequisites. As explained before, it is highly reccomended to have at least a base level understanding of the tools used in the elaboration of this library before proceeding. Most documentation for that can be found in 'External Resources'. That being said, the adquirement of those tools before hand is also important, and as such, before trying to modify the code in this repository, a few tools should be installed, with the most important being: a Ubuntu 20.04 (or based upon) Linux installation. (it can be either Bare Metal or through Virtualization) ROS 20.04 Melodic or compatible a C/C++ Compiler (Most of the reccomended Linux installations should already have GCC installed, so you can probably not worry about this one, unless you're installing Gentoo, Arch or some other unorthodox Linux distro.) If you're to push the code onto the repo (Which you're probably thinking on doing, if you're to work on this) you should have Git installed. A Git client such as Github Desktop or GitKraken is recommended. An IDE, such as Visual Studio Code or CLion It should be fairly easy to compile all of this, as none of it is strictly proprietary and all of it is free, once that's dealt with, we can start properly working. Project Structure This project is, in essence, a ROS Library, which follows and is dictated by ROS's design conventions. The main thing to note are the fact that this project MUST be run along with ROS, otherwise it will lack a lot of dependencies that it needs. Since stuff such as the Topics structure and the Publisher/Subscriber format used are defined on those external libraries. Furthermore on that structure, our project's 'src' and 'include' folders are structured in a way that the code of a specific topic is all contained on the same subfolder, a fact that should be considered when navigating this project. Another thing that should be noted on these two folders, is that the variable declaration in 'include' is also applied for 'src', the management of such variables are a common source of confusion, so you should have that in mind Project Compilation. Catkin rostopic and rosmake","title":"1. Getting Started"},{"location":"1.%20Getting%20Started/#getting-started-in-toolkit","text":"","title":"Getting Started in Toolkit."},{"location":"1.%20Getting%20Started/#general-information","text":"Welcome to the SinfonIA Toolkit documentation page. This project is a low-level ROS library Developed and mantained by the SinfonIA Uniandes team. Its main purpouse is the connection and management for the code of the different subsystems that compone this project (For example, Vision or Motion Control, this same webpage includes an extensive list of the tools involved in this project, please refer to the index for an extensive list on the matter.). This guide will cover the technical, structural, and algorithmic nuances of this project, however, some prior knowledge on the structures are reccomended (please refer to 'External Sources' for further information and documentation on such).","title":"General Information"},{"location":"1.%20Getting%20Started/#project-prerequisites","text":"As explained before, it is highly reccomended to have at least a base level understanding of the tools used in the elaboration of this library before proceeding. Most documentation for that can be found in 'External Resources'. That being said, the adquirement of those tools before hand is also important, and as such, before trying to modify the code in this repository, a few tools should be installed, with the most important being: a Ubuntu 20.04 (or based upon) Linux installation. (it can be either Bare Metal or through Virtualization) ROS 20.04 Melodic or compatible a C/C++ Compiler (Most of the reccomended Linux installations should already have GCC installed, so you can probably not worry about this one, unless you're installing Gentoo, Arch or some other unorthodox Linux distro.) If you're to push the code onto the repo (Which you're probably thinking on doing, if you're to work on this) you should have Git installed. A Git client such as Github Desktop or GitKraken is recommended. An IDE, such as Visual Studio Code or CLion It should be fairly easy to compile all of this, as none of it is strictly proprietary and all of it is free, once that's dealt with, we can start properly working.","title":"Project Prerequisites."},{"location":"1.%20Getting%20Started/#project-structure","text":"This project is, in essence, a ROS Library, which follows and is dictated by ROS's design conventions. The main thing to note are the fact that this project MUST be run along with ROS, otherwise it will lack a lot of dependencies that it needs. Since stuff such as the Topics structure and the Publisher/Subscriber format used are defined on those external libraries. Furthermore on that structure, our project's 'src' and 'include' folders are structured in a way that the code of a specific topic is all contained on the same subfolder, a fact that should be considered when navigating this project. Another thing that should be noted on these two folders, is that the variable declaration in 'include' is also applied for 'src', the management of such variables are a common source of confusion, so you should have that in mind","title":"Project Structure"},{"location":"1.%20Getting%20Started/#project-compilation","text":"","title":"Project Compilation."},{"location":"1.%20Getting%20Started/#catkin","text":"","title":"Catkin"},{"location":"1.%20Getting%20Started/#rostopic-and-rosmake","text":"","title":"rostopic and rosmake"},{"location":"2.%20External%20Sources/","text":"External Sources. As per usual in this kind of project, SinfonIA Toolkit is built over external frameworks, languages and tools. Therefore, it is important to know such tools at least at a basic level to be able to understand a few of our design decisions on this project. As a way to aid such comprehension, here is a compilation of external resources used during the development of this project. Keep in mind, Even though this list tries to cover as much ground as possible, truth be told, it might not present a complete picture on the functioning of such tools. It will most probably be updated over time to reflect the best version of such a list we can make. C++ First of all, this piece of software is written in the C++ programming language. And as such, is subject to the rules and conventions that make up its syntax. C++ is a very well established language in the realm of computer science, and as such, is very well documented under official and non-official sources. One of the first places where C++ should be consulted is in the C++ Core Guidelines, proposed and led in philosophy by Bjarne Stroustrup, lead creator of the C++ language, it is about as close to an official C++ Guide as it gets. Read the C++ Core Guidelines Here. Other unofficial, but useful resources include: GeeksforGeeks C++ Reference manual Microsoft C++ Language Reference UNAM C++ Programming Guide (Spanish) ROS Even though ROS has plenty of versions, a lot of the code is version sensitive and as such, using a different version to the one currently standardized might cause compatibility issues, as of 2022, the current version is **ROS 20.04 - Noetic Ninjemys**, Specifically, the package developed for Ubuntu and Ubuntu-based Linux distros, **the use of this version is highly reccomended, if not even required** On a higher level than C++, we use the ROS framework, designed for the development and programming of robotics. This is an open source framework that informs a lot of the design decisions on how tools communicate with each other. ROS is widely documented on an official manner, given that, we believe that most of the really important concepts can be found there. Read the official ROS documentation here. Other documentation that might be of note includes: Stanford's 'ROS: an open-source Robot Operating System' ROS Robotics by example, Second Edition. Ubuntu SinfonIA Toolkit is designed to run over Linux, and as mentioned beforehand, an Ubuntu 20.04 install is preferred, this is a relatively widespread distribution of a Linux-based system, and therefore, one of the best documented ones, however, a deep understanding of the OS is not required to work on this tool and it can be run either from Bare Metal or through a virtual machine. This OS is completely free, open source and doesn't require any sort of activation. Access Ubuntu's official website here Some links that might be of use include: Ubuntu 20.04 download link How to use VirtualBox: Quick Overview ReadtheDocs Last but not least, this documentation is written on ReadtheDocs' tools for documentation, and hosted on their servers, for further expansion of this guide, we recommend reading their official documentation on the subject. Such documentation can be found here","title":"2. External Sources"},{"location":"2.%20External%20Sources/#external-sources","text":"As per usual in this kind of project, SinfonIA Toolkit is built over external frameworks, languages and tools. Therefore, it is important to know such tools at least at a basic level to be able to understand a few of our design decisions on this project. As a way to aid such comprehension, here is a compilation of external resources used during the development of this project. Keep in mind, Even though this list tries to cover as much ground as possible, truth be told, it might not present a complete picture on the functioning of such tools. It will most probably be updated over time to reflect the best version of such a list we can make.","title":"External Sources."},{"location":"2.%20External%20Sources/#c","text":"First of all, this piece of software is written in the C++ programming language. And as such, is subject to the rules and conventions that make up its syntax. C++ is a very well established language in the realm of computer science, and as such, is very well documented under official and non-official sources. One of the first places where C++ should be consulted is in the C++ Core Guidelines, proposed and led in philosophy by Bjarne Stroustrup, lead creator of the C++ language, it is about as close to an official C++ Guide as it gets. Read the C++ Core Guidelines Here. Other unofficial, but useful resources include: GeeksforGeeks C++ Reference manual Microsoft C++ Language Reference UNAM C++ Programming Guide (Spanish)","title":"C++"},{"location":"2.%20External%20Sources/#ros","text":"Even though ROS has plenty of versions, a lot of the code is version sensitive and as such, using a different version to the one currently standardized might cause compatibility issues, as of 2022, the current version is **ROS 20.04 - Noetic Ninjemys**, Specifically, the package developed for Ubuntu and Ubuntu-based Linux distros, **the use of this version is highly reccomended, if not even required** On a higher level than C++, we use the ROS framework, designed for the development and programming of robotics. This is an open source framework that informs a lot of the design decisions on how tools communicate with each other. ROS is widely documented on an official manner, given that, we believe that most of the really important concepts can be found there. Read the official ROS documentation here. Other documentation that might be of note includes: Stanford's 'ROS: an open-source Robot Operating System' ROS Robotics by example, Second Edition.","title":"ROS"},{"location":"2.%20External%20Sources/#ubuntu","text":"SinfonIA Toolkit is designed to run over Linux, and as mentioned beforehand, an Ubuntu 20.04 install is preferred, this is a relatively widespread distribution of a Linux-based system, and therefore, one of the best documented ones, however, a deep understanding of the OS is not required to work on this tool and it can be run either from Bare Metal or through a virtual machine. This OS is completely free, open source and doesn't require any sort of activation. Access Ubuntu's official website here Some links that might be of use include: Ubuntu 20.04 download link How to use VirtualBox: Quick Overview","title":"Ubuntu"},{"location":"2.%20External%20Sources/#readthedocs","text":"Last but not least, this documentation is written on ReadtheDocs' tools for documentation, and hosted on their servers, for further expansion of this guide, we recommend reading their official documentation on the subject. Such documentation can be found here","title":"ReadtheDocs"}]}